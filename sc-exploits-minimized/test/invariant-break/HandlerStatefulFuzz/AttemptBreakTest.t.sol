// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol"
import {STDInvariant} from "forge-std/StdInvariant.sol"
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol"
import {MockUSDC} from "../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../mocks/YildERC20.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract AttemptBreakTest is STDInvariant, Test {
    HandlerStatefulFuzzCatches hsfc;
    MockUSDC mockUSDC;
    YeildERC20 yeildERC20;
    IERC20[] supportedTokens;

    address user = makeAddr("user");

    function setUp() public {
        // Supplying "user" with token
        vm.startPrank(user);
        yeildERC20 = new YeildERC20();
        mockUSDC = new MockUSDC();
        mockUSDC.mint(user, yeildERC20.INITIAL_SUPPLY());
        vm.stopPrank(user);

        supportedTokens.push(mockUSDC);
        supportedTokens.push(yeildERC20);

        hsfc = new HandlerStatefulFuzzCatches(supportedTokens);
        targetContract(address(hsfc));
    }

    function invariant_testInvariantBreaks() public {
        vm.startPrank(user);
    }
}
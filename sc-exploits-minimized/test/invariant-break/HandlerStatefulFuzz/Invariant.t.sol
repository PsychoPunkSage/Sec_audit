// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../mocks/YeildERC20.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Handler} from "./Handler.t.sol";

contract Invariant is StdInvariant, Test {
    HandlerStatefulFuzzCatches hsfc;
    Handler handler;
    MockUSDC mockUSDC;
    YeildERC20 yeildERC20;
    IERC20[] supportedTokens;
    uint256 startingAmount;

    address user = makeAddr("user");

    function setUp() public {
        // Supplying "user" with token
        vm.startPrank(user);
        yeildERC20 = new YeildERC20();
        mockUSDC = new MockUSDC();
        startingAmount = yeildERC20.INITIAL_SUPPLY();
        mockUSDC.mint(user, startingAmount);
        vm.stopPrank();

        supportedTokens.push(mockUSDC);
        supportedTokens.push(yeildERC20);

        // targetContract(address(hsfc));
        hsfc = new HandlerStatefulFuzzCatches(supportedTokens);
        handler = new Handler(hsfc, mockUSDC, yeildERC20, user);
        // Now we need to specifically choose a "selector" from the handler.
        bytes4[] selectors = new bytes4[](4);
    }

    function testStartingAmountSame() public {
        assert(startingAmount == yeildERC20.balanceOf(user));
        assert(startingAmount == mockUSDC.balanceOf(user));
    }

    function invariant_testInvariantBreaks() public {
        vm.startPrank(user);
        hsfc.withdrawToken(mockUSDC);
        hsfc.withdrawToken(yeildERC20);

        // Since there is only 1 user. So, if hw withdraw everyhting, there will be nothing left with "Vault (hsfc)"
        assert(yeildERC20.balanceOf(address(hsfc)) == 0);
        assert(mockUSDC.balanceOf(address(hsfc)) == 0);

        // Current userbalance == startingAmount
        assert(yeildERC20.balanceOf(user) == startingAmount);
        assert(mockUSDC.balanceOf(user) == startingAmount);
        
    }
}
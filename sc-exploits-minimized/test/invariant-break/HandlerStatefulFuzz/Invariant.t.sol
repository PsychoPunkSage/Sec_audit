// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../mocks/YeildERC20.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Handler} from "./Handler.t.sol";

contract AttemptBreakTest is StdInvariant, Test {
    HandlerStatefulFuzzCatches hsfc;
    Handler handler;
    MockUSDC mockUSDC;
    YeildERC20 yieldERC20;
    IERC20[] supportedTokens;
    uint256 startingAmount;

    address user = makeAddr("user");

    function setUp() public {
        // Supplying "user" with token
        vm.startPrank(user);
        yieldERC20 = new YeildERC20();
        mockUSDC = new MockUSDC();
        startingAmount = yieldERC20.INITIAL_SUPPLY();
        mockUSDC.mint(user, startingAmount);
        vm.stopPrank();
 
        supportedTokens.push(mockUSDC);
        supportedTokens.push(yieldERC20);

        hsfc = new HandlerStatefulFuzzCatches(supportedTokens);
        handler = new Handler(hsfc, mockUSDC, yieldERC20, user);
        // Need to keep a trach of all the fn selector needed.
        bytes4[] memory selectors = new bytes4[](4);
        selectors[0] = handler.depositYeildERC20.selector;
        selectors[1] = handler.depositMockUSDC.selector;
        selectors[2] = handler.withdrawMockUSDC.selector;
        selectors[3] = handler.withdrawYeildERC20.selector;
        // targetContract(address(hsfc));
        targetSelector(FuzzSelector({addr: address(handler), selectors: selectors}));
        targetContract(address(handler));
    }

    function invariant_testInvariantBreaksHandler() public {
        vm.startPrank(user);
        hsfc.withdrawToken(mockUSDC);
        hsfc.withdrawToken(yieldERC20);

        // Since there is only 1 user. So, if hw withdraw everyhting, there will be nothing left with "Vault (hsfc)"
        assert(yieldERC20.balanceOf(address(hsfc)) == 0);
        assert(mockUSDC.balanceOf(address(hsfc)) == 0);

        // Current userbalance == startingAmount
        assert(yieldERC20.balanceOf(user) == startingAmount);
        assert(mockUSDC.balanceOf(user) == startingAmount);
        
    }
    /// CAUGHT ISSUE #1:
    // Weird ERC20: After every 10 txn of "YeildERC20" => 10% of the yeilderc20 is sent to OWNER
    //              => This breaks our invariants.....

}
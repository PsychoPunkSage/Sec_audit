// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {YeildERC20} from "../../mocks/YeildERC20.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";

contract Handler is Test {
    HandlerStatefulFuzzCatches hsfc;
    MockUSDC mockUSDC;
    YeildERC20 yeildERC20;
    address user;

    constructor(
        HandlerStatefulFuzzCatches _handlerStatefulFuzzCatches,
        MockUSDC _mockUSDC,
        YeildERC20 _yeildERC20,
        address _user
    ) {
        hsfc = _handlerStatefulFuzzCatches;
        // we only want to work with 2 tokens only....
        mockUSDC = _mockUSDC;
        yeildERC20 = _yeildERC20;
        user = _user;
    }

    /// We only want our fuzzer to deposit only "YeildERC20" or "MockUSDC" 
    /// We only working with token that is supported...
    /// We're approving before hand the amount that user actually has...

    ///////////////
    // Deposit() //
    ///////////////
    function depositYeildERC20(uint256 _amount) public {
        // Bounding how much USER is spending....
        uint256 amount = bound(_amount, 0, yeildERC20.balanceOf(user));
        // Restricting the fn calls to only be made by USER...
        vm.startPrank(user);
        yeildERC20.approve(address(hsfc), amount); // always approve tokes to avoid any unnecessary reverts..
        hsfc.depositToken(yeildERC20, amount);
        vm.stopPrank();
    }

    function depositMockUSDC(uint256 _amount) public {
        // Bounding the USDC User can spent....
        uint256 amount = bound(_amount, 0, mockUSDC.balanceOf(user));
        // Restricting the fn calls to only be made by USER...
        vm.startPrank(user);
        mockUSDC.approve(address(hsfc), amount);
        hsfc.depositToken(mockUSDC, amount);
        vm.stopPrank();
    }

    ////////////////
    // Withdraw() //
    ////////////////
    function withdrawYeildERC20() public {
        vm.startPrank(user);
        hsfc.withdrawToken(yeildERC20);
        vm.stopPrank();
    }

    function withdrawMockUSDC() public {
        vm.startPrank(user);
        hsfc.withdrawToken(mockUSDC);
        vm.stopPrank();
    }
}
